-- 1. Create users table
CREATE TABLE userss (
  u_id SERIAL PRIMARY KEY,
  uuname TEXT NOT NULL,
  username TEXT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  followers INTEGER NOT NULL,
  users_id INT,
  uname VARCHAR(50),
  email VARCHAR(100)
);

-- 2. Create ActivityLog table
CREATE TABLE ActivityLog (
  log_id INT,
  user_id INT,
  activity_type VARCHAR(50),
  timestamp DATETIME
);

-- 3. Insert data into users
INSERT INTO userss (uuname, username, created_at, followers)
VALUES 
  ('Alice', 'alice123', '2022-01-01 12:00:00', 100),
  ('Bob', 'bob456', '2022-01-02 14:00:00', 200),
  ('Charlie', 'charlie789', '2022-01-03 15:00:00', 150),
  ('David', 'david101', '2022-01-04 16:00:00', 300);

-- 4. Insert data into ActivityLog
INSERT INTO ActivityLog (log_id, user_id, activity_type, timestamp)
VALUES
  (1, 1, 'login', '2025-05-10 09:00:00'),
  (2, 1, 'search', '2025-05-10 09:15:00'),
  (3, 2, 'login', '2025-05-10 10:00:00'),
  (4, 3, 'login', '2025-05-11 11:00:00'),
  (5, 1, 'purchase', '2025-05-12 14:30:00'),
  (6, 2, 'search', '2025-05-15 16:45:00'),
  (7, 1, 'logout', '2025-05-18 20:00:00'),
  (8, 1, 'login', '2025-01-15 10:30:00'),
  (9, 2, 'search', '2025-02-05 14:45:00'),
  (10, 3, 'purchase', '2025-03-20 09:15:00'),
  (11, 1, 'search', '2025-04-10 16:30:00'),
  (12, 2, 'login', '2025-05-05 11:45:00'),
  (13, 3, 'search', '2025-05-15 08:30:00');

-- 5. Create posts table
CREATE TABLE posts (
  post_id SERIAL PRIMARY KEY,
  content TEXT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  likes INTEGER NOT NULL DEFAULT 0,
  comments INTEGER NOT NULL DEFAULT 0,
  shares INTEGER NOT NULL DEFAULT 0
);

-- 6. Create interactions table
CREATE TABLE interactions (
  interaction_id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(user_id),
  post_id INTEGER REFERENCES posts(post_id),
  type CHAR(1) NOT NULL CHECK (type IN ('L', 'C', 'S')),
  created_at TIMESTAMP NOT NULL DEFAULT now()
);

-- 7. Insert data into posts
INSERT INTO posts (content, created_at, likes, comments, shares)
VALUES 
  ('Check out this cool new product!', '2025-05-01 13:00:00', 50, 10, 5),
  ('Had a great day at the beach!', '2025-05-02 14:30:00', 30, 5, 2),
  ('Just finished reading an amazing book!', '2025-05-03 15:30:00', 45, 8, 3),
  ('Excited for the weekend!', '2025-05-04 16:30:00', 60, 12, 6);

-- 8. Insert data into interactions
INSERT INTO interactions (user_id, post_id, type, created_at)
VALUES 
  (1, 1, 'L', '2025-05-01 13:30:00'),
  (2, 2, 'L', '2025-05-02 15:00:00'),
  (3, 3, 'C', '2025-05-03 16:00:00'),
  (4, 1, 'S', '2025-05-04 17:00:00');

-- 9. SELECT operation 
SELECT 
  'RecentActivity' AS source_tag,
  U.u_id AS user_id, 
  U.uuname AS user_name, 
  A.activity_type AS activity_type, 
  A.timestamp AS activity_timestamp
FROM userss U
JOIN ActivityLog A ON U.u_id = A.user_id
WHERE A.timestamp >= DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY);

SELECT 
  'PostLikes' AS source_tag,
  P.post_id AS post_id,
  P.content AS post_content,
  P.likes AS post_likes,
  P.comments AS post_comments,
  P.shares AS post_shares
FROM posts P;

SELECT 
  'TopFollowers' AS source_tag,
  U.u_id AS user_id,
  U.uuname AS user_name,
  U.followers AS top_followers
FROM userss U
ORDER BY U.followers DESC
LIMIT 3;

SELECT 
  'EngagementPercents' AS source_tag,
  P.post_id AS post_id,
  P.content AS post_content,
  CONCAT(ROUND(CAST(P.likes AS DECIMAL) / NULLIF((P.likes + P.comments + P.shares), 0) * 100, 2), '%') AS engagement_likes_percent,
  CONCAT(ROUND(CAST(P.comments AS DECIMAL) / NULLIF((P.likes + P.comments + P.shares), 0) * 100, 2), '%') AS engagement_comments_percent,
  CONCAT(ROUND(CAST(P.shares AS DECIMAL) / NULLIF((P.likes + P.comments + P.shares), 0) * 100, 2), '%') AS engagement_shares_percent
FROM posts P;